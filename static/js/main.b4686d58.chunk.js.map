{"version":3,"sources":["logo.svg","utils.js","App.js","reportWebVitals.js","index.js"],"names":["startTimer","name","startTime","Date","console","info","toISOString","stopTimer","timer","timeUsed","endTime","getTime","getRandomInt","max","Math","floor","random","createArray","n","arr","Uint32Array","i","increaseArraySizeBy","biggerArr","length","set","rotate","keyframes","AppWrapper","styled","div","Header","header","Logo","img","processing","FormBlock","Label","label","Input","input","Button","button","Body","createWorker","callback","worker","window","Worker","onmessage","event","data","action","result","onerror","error","message","sortProcess","items","finishedCallback","iterationCallback","terminate","newWorker","postMessage","App","useState","setProcessing","setItems","time","setTime","workerTime","setWorkerTime","itemSize","setItemSize","intervalTime","setIntervalTime","src","logo","alt","htmlFor","type","value","min","onChange","e","target","disabled","onClick","msInterval","MAX_INTERVALS","generalTimer","machineTimer","sortWorker","intervalCount","insertionInterval","semiSortedItems","sort","sortedItems","clearInterval","setInterval","createAndSortArray","msTime","msWorkerTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4686d58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.81f0d907.svg\";","\nfunction startTimer (name = 'default') {\n  const startTime = new Date()\n  console.info('starting timer at: ', startTime.toISOString())\n  return { name, startTime }\n}\n\nfunction stopTimer (timer) {\n  let timeUsed = 0\n  if (timer) {\n    const { name, startTime } = timer\n    const endTime = new Date()\n    timeUsed = endTime.getTime() - startTime.getTime()\n    console.info(`stopping ${name} at ${endTime.toISOString()}!, duration: ${timeUsed} ms`)\n  }\n  return timeUsed\n}\n\nfunction getRandomInt (max) {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\nfunction createArray (n) {\n  const arr = new Uint32Array(n)\n  for (let i = 0; i < n; ++i) arr[i] = getRandomInt(n)\n  return arr\n}\n\nfunction increaseArraySizeBy (arr, n) {\n  const biggerArr = new Uint32Array(arr.length + n)\n  biggerArr.set(arr, 0)\n  for (let i = (arr.length - 1); i < (arr.length + n); ++i) arr[i] = getRandomInt(arr.length + n)\n  return biggerArr\n}\n\nexport {\n  startTimer,\n  stopTimer,\n  createArray,\n  increaseArraySizeBy\n}\n","/* global Worker */\nimport React, { useState } from 'react'\nimport logo from './logo.svg'\nimport { startTimer, stopTimer, createArray, increaseArraySizeBy } from './utils'\nimport styled, { keyframes } from 'styled-components'\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst AppWrapper = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Logo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${rotate} infinite ${({ processing }) => processing ? '1s' : '20s'} linear;\n  }\n`\n\nconst FormBlock = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n`\n\nconst Label = styled.label`\n  text-align: left;\n  font-size: calc(5px + 2vmin);\n  min-width: 250px;\n  margin-bottom: 10px;\n`\n\nconst Input = styled.input`\n  width: 100px;\n  height: 25px;\n  align-self: flex-end;\n  font-size: calc(2px + 2vmin);\n  margin-bottom: 10px;\n  background-color: transparent;\n  border: 0;\n  border-bottom: 2px dotted white;\n  color: white;\n`\n\nconst Button = styled.button`\n  width: 50px;\n  height: 50px;\n  font-size: calc(2px + 2vmin);\n  border-radius: 50%;\n  color: white;\n  background-color: darkgreen;\n  border: 0;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: wait;\n    background-color: gray;\n  }\n`\n\nconst Body = styled.div`\n  max-width: 250px;\n  height: 250px;\n`\n\nfunction createWorker (callback = () => {}) {\n  let worker = null\n  if (window.Worker) {\n    worker = new Worker('worker.js')\n\n    worker.onmessage = function (event) {\n      const { action, result } = event.data\n      callback(result, action)\n    }\n\n    worker.onerror = function (error) {\n      console.error('Worker error: ' + error.message + '\\n')\n      throw error\n    }\n  } else {\n    console.error('Your browser doesnt support service workers')\n  }\n\n  return worker\n}\n\nfunction sortProcess (\n  worker,\n  { items },\n  finishedCallback = () => {},\n  iterationCallback = () => {}\n) {\n  if (worker) worker.terminate()\n  const newWorker = createWorker((result, action) => {\n    if (action === 'sort') {\n      finishedCallback(result)\n    } else if (action === 'sort-tick') {\n      iterationCallback(result)\n    }\n  })\n  newWorker.postMessage({ action: 'sort', items })\n  return newWorker\n}\n\nfunction createAndSortArray (n, msInterval, callback = () => {}) {\n  const MAX_INTERVALS = 100\n  const generalTimer = startTimer('sort it all')\n  let machineTimer = null\n  let sortWorker = null\n  let intervalCount = 0\n  let insertionInterval = null\n\n  let semiSortedItems = createArray(n) // not completely sorted items\n\n  // Sorting mechanism\n  const sort = (items) => {\n    stopTimer(machineTimer)\n    machineTimer = startTimer('sort machine')\n    sortWorker = sortProcess(\n      sortWorker,\n      { items },\n      (sortedItems) => {\n        if (sortWorker) sortWorker.terminate()\n        clearInterval(insertionInterval)\n        callback(sortedItems, stopTimer(generalTimer), stopTimer(machineTimer))\n      },\n      (sortedItems) => {\n        semiSortedItems = sortedItems\n      }\n    )\n  }\n\n  // Interval to add more items\n  insertionInterval = setInterval(() => {\n    intervalCount++\n    // Not going to let this go to the infinite eh?\n    if (intervalCount === MAX_INTERVALS) {\n      clearInterval(insertionInterval)\n    }\n    semiSortedItems = increaseArraySizeBy(semiSortedItems, 1)\n\n    sort(semiSortedItems)\n  }, msInterval)\n}\n\nconst MIN_ITEMS_TO_PROCESS = 2\nconst MAX_ITEMS_TO_PROCESS = 100000\nconst MS_MIN_INTERVAL = 50\nconst MS_MAX_INTERVAL = 100\n\nfunction App () {\n  const [processing, setProcessing] = useState(false)\n  const [items, setItems] = useState([])\n  const [time, setTime] = useState(null)\n  const [workerTime, setWorkerTime] = useState(null)\n  const [itemSize, setItemSize] = useState(100000)\n  const [intervalTime, setIntervalTime] = useState(MS_MIN_INTERVAL)\n\n  return (\n    <AppWrapper>\n      <Header>\n        <Logo processing={processing} src={logo} alt='logo' />\n        <FormBlock>\n          <Label htmlFor='interval'>\n            Size (2-1000000):\n          </Label>\n          <Input\n            type='number'\n            name='size'\n            value={itemSize}\n            min={MIN_ITEMS_TO_PROCESS}\n            max={MAX_ITEMS_TO_PROCESS}\n            onChange={(e) => {\n              setItemSize(e.target.value)\n            }}\n          />\n        </FormBlock>\n        <FormBlock>\n          <Label htmlFor='interval'>\n            Interval ms (50-100):\n          </Label>\n          <Input\n            type='number'\n            name='interval'\n            value={intervalTime}\n            min={MS_MIN_INTERVAL}\n            max={MS_MAX_INTERVAL}\n            onChange={(e) => {\n              setIntervalTime(e.target.value)\n            }}\n          />\n        </FormBlock>\n\n        <Button\n          disabled={processing}\n          onClick={() => {\n            setProcessing(true)\n            createAndSortArray(itemSize, intervalTime, (items, msTime, msWorkerTime) => {\n              setProcessing(false)\n              setItems(items)\n              setTime(msTime)\n              setWorkerTime(msWorkerTime)\n            })\n          }}\n        >\n          Go\n        </Button>\n      </Header>\n\n      <Body>\n        {!processing && time && (\n          <>\n            <p>\n              Total time: <code>{time}ms</code> for {items.length} items\n            </p>\n            <p>\n              Worker time <code>{workerTime}ms</code> to sort it all\n            </p>\n          </>\n        )}\n      </Body>\n    </AppWrapper>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}