{"version":3,"sources":["logo.svg","utils.js","App.js","reportWebVitals.js","index.js"],"names":["startTimer","name","startTime","Date","console","info","toISOString","stopTimer","timer","timeUsed","endTime","getTime","getRandomInt","max","Math","floor","random","createArray","n","arr","Uint32Array","i","increaseArraySizeBy","biggerArr","length","set","correctValue","value","min","rotate","keyframes","AppWrapper","styled","div","Header","header","Logo","img","processing","FormBlock","Label","label","MinMax","Input","input","Checkbox","Button","button","Body","Warning","code","createWorker","callback","worker","window","Worker","onmessage","event","data","action","result","onerror","error","message","sortProcess","items","finishedCallback","iterationCallback","terminate","newWorker","postMessage","MAX_ITEMS_TO_PROCESS","App","useState","setProcessing","setItems","time","setTime","workerTime","setWorkerTime","itemSize","setItemSize","intervalStatus","setIntervalStatus","intervalTime","setIntervalTime","showWarning","src","logo","alt","htmlFor","type","onChange","e","target","checked","disabled","onClick","msInterval","MAX_INTERVALS","generalTimer","machineTimer","sortWorker","intervalCount","insertionInterval","semiSortedItems","sort","sortedItems","clearInterval","setInterval","createAndSortArray","msTime","msWorkerTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae3c3f33.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.81f0d907.svg\";","\nfunction startTimer (name = 'default') {\n  const startTime = new Date()\n  console.info('starting timer at: ', startTime.toISOString())\n  return { name, startTime }\n}\n\nfunction stopTimer (timer) {\n  let timeUsed = 0\n  if (timer) {\n    const { name, startTime } = timer\n    const endTime = new Date()\n    timeUsed = endTime.getTime() - startTime.getTime()\n    console.info(`stopping ${name} at ${endTime.toISOString()}!, duration: ${timeUsed} ms`)\n  }\n  return timeUsed\n}\n\nfunction getRandomInt (max) {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\nfunction createArray (n) {\n  const arr = new Uint32Array(n)\n  for (let i = 0; i < n; ++i) arr[i] = getRandomInt(n)\n  return arr\n}\n\nfunction increaseArraySizeBy (arr, n) {\n  const biggerArr = new Uint32Array(arr.length + n)\n  biggerArr.set(arr, 0)\n  for (let i = (arr.length - 1); i < (arr.length + n); ++i) arr[i] = getRandomInt(arr.length + n)\n  return biggerArr\n}\n\nfunction correctValue (value, min, max) {\n  return value > max ? max : value < min ? min : value\n}\n\nexport {\n  startTimer,\n  stopTimer,\n  createArray,\n  increaseArraySizeBy,\n  correctValue\n}\n","/* global Worker */\nimport React, { useState } from 'react'\nimport logo from './logo.svg'\nimport { startTimer, stopTimer, createArray, increaseArraySizeBy, correctValue } from './utils'\nimport styled, { keyframes } from 'styled-components'\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst AppWrapper = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: calc(100vh - 40px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  color: white;\n  padding: 20px;\n`\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Logo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${rotate} infinite ${({ processing }) => processing ? '1s' : '20s'} linear;\n  }\n`\n\nconst FormBlock = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 16px;\n`\n\nconst Label = styled.label`\n  text-align: left;\n  flex: 1 0 auto;\n  min-width: 150px;\n`\n\nconst MinMax = styled.div`\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 0 0 0 20px;\n\n  &>span {\n    display: flex;\n    font-size: 16px;\n    justify-content: flex-end;\n  }\n`\n\nconst Input = styled.input`\n  width: 100px;\n  height: 25px;\n  align-self: flex-end;\n  font-size: 20px;\n  background-color: transparent;\n  border: 0;\n  border-bottom: 2px dashed white;\n  color: white;\n  text-align: right;\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n  margin-bottom: 4px;\n`\n\nconst Checkbox = styled.input`\n  width: 25px;\n  height: 25px;\n  align-self: flex-end;\n  color: white;\n`\n\nconst Button = styled.button`\n  width: 50px;\n  height: 50px;\n  font-size: 16px;\n  border-radius: 50%;\n  color: white;\n  background-color: darkgreen;\n  border: 0;\n  cursor: pointer;\n  font-weight: 900;\n\n  &:disabled {\n    cursor: wait;\n    background-color: gray;\n  }\n`\n\nconst Body = styled.div`\n  max-width: 250px;\n  height: 250px;\n`\n\nconst Warning = styled.code`\n  color: darkkhaki;\n  margin: 20px 0;\n  max-width: 350px;\n  font-size: 14px;\n`\n\nfunction createWorker (callback = () => {}) {\n  let worker = null\n  if (window.Worker) {\n    worker = new Worker('worker.js')\n\n    worker.onmessage = function (event) {\n      const { action, result } = event.data\n      callback(result, action)\n    }\n\n    worker.onerror = function (error) {\n      console.error('Worker error: ' + error.message + '\\n')\n      throw error\n    }\n  } else {\n    console.error('Your browser doesnt support service workers')\n  }\n\n  return worker\n}\n\nfunction sortProcess (\n  worker,\n  { items },\n  finishedCallback = () => {},\n  iterationCallback = () => {}\n) {\n  if (worker) worker.terminate()\n  const newWorker = createWorker((result, action) => {\n    if (action === 'sort') {\n      finishedCallback(result)\n    } else if (action === 'sort-tick') {\n      iterationCallback(result)\n    }\n  })\n  newWorker.postMessage({ action: 'sort', items })\n  return newWorker\n}\n\nfunction createAndSortArray (n, msInterval = null, callback = () => {}) {\n  const MAX_INTERVALS = 100\n  const generalTimer = startTimer('sort it all')\n  let machineTimer = null\n  let sortWorker = null\n  let intervalCount = 0\n  let insertionInterval = null\n\n  let semiSortedItems = createArray(n) // not completely sorted items\n\n  // Sorting mechanism\n  const sort = (items) => {\n    stopTimer(machineTimer)\n    machineTimer = startTimer('sort machine')\n    sortWorker = sortProcess(\n      sortWorker,\n      { items },\n      (sortedItems) => {\n        if (sortWorker) sortWorker.terminate()\n        if (insertionInterval) clearInterval(insertionInterval)\n        callback(sortedItems, stopTimer(generalTimer), stopTimer(machineTimer))\n      },\n      (sortedItems) => {\n        semiSortedItems = sortedItems\n      }\n    )\n  }\n\n  // Interval to add more items\n  if (msInterval) {\n    insertionInterval = setInterval(() => {\n      intervalCount++\n      // Not going to let this go to the infinite eh?\n      if (intervalCount === MAX_INTERVALS) {\n        clearInterval(insertionInterval)\n      }\n      semiSortedItems = increaseArraySizeBy(semiSortedItems, 1)\n\n      sort(semiSortedItems)\n    }, msInterval)\n  }\n\n  sort(semiSortedItems)\n}\n\nconst MIN_ITEMS_TO_PROCESS = 2\nconst REQUESTED_ITEMS_TO_PROCESS = 100000\nconst MAX_ITEMS_TO_PROCESS = 1000000\nconst MS_MIN_INTERVAL = 50\nconst MS_MAX_INTERVAL = 1000\n\nfunction App () {\n  const [processing, setProcessing] = useState(false)\n  const [items, setItems] = useState([])\n  const [time, setTime] = useState(null)\n  const [workerTime, setWorkerTime] = useState(null)\n  const [itemSize, setItemSize] = useState(REQUESTED_ITEMS_TO_PROCESS)\n  const [intervalStatus, setIntervalStatus] = useState(true)\n  const [intervalTime, setIntervalTime] = useState(MS_MIN_INTERVAL)\n\n  const showWarning = itemSize > (MAX_ITEMS_TO_PROCESS * 0.7)\n\n  return (\n    <AppWrapper>\n      <Header>\n        <Logo processing={processing} src={logo} alt='logo' />\n        <FormBlock>\n          <Label htmlFor='size'>\n            Size:\n          </Label>\n          <MinMax>\n            <Input\n              type='number'\n              name='size'\n              value={itemSize}\n              min={MIN_ITEMS_TO_PROCESS}\n              max={MAX_ITEMS_TO_PROCESS}\n              onChange={(e) => {\n                setItemSize(correctValue(e.target.value, MIN_ITEMS_TO_PROCESS, MAX_ITEMS_TO_PROCESS))\n              }}\n            />\n            <span>2 to 1000000</span>\n          </MinMax>\n        </FormBlock>\n        <FormBlock>\n          <Label htmlFor='enabledInterval'>\n            Enable intervals:\n          </Label>\n          <Checkbox\n            type='checkbox'\n            name='enabledInterval'\n            value='true'\n            checked={intervalStatus}\n            onChange={(e) => {\n              setIntervalStatus(e.target.checked)\n            }}\n          />\n        </FormBlock>\n        {intervalStatus && (\n          <FormBlock>\n            <Label htmlFor='interval'>\n              Interval ms:\n            </Label>\n            <MinMax>\n              <Input\n                type='number'\n                name='interval'\n                value={intervalTime}\n                min={MS_MIN_INTERVAL}\n                max={MS_MAX_INTERVAL}\n                onChange={(e) => {\n                  setIntervalTime(correctValue(e.target.value, MS_MIN_INTERVAL, MS_MAX_INTERVAL))\n                }}\n              />\n              <span>50 to 100</span>\n            </MinMax>\n          </FormBlock>\n        )}\n        {showWarning && (\n          <Warning>\n            This number of numbers could take a lot of time!\n          </Warning>\n        )}\n        <Button\n          disabled={processing}\n          onClick={() => {\n            setProcessing(true)\n            createAndSortArray(itemSize, intervalStatus && intervalTime, (items, msTime, msWorkerTime) => {\n              setProcessing(false)\n              setItems(items)\n              setTime(msTime)\n              setWorkerTime(msWorkerTime)\n            })\n          }}\n        >\n          GO\n        </Button>\n      </Header>\n\n      <Body>\n        {!processing && time && (\n          <>\n            <p>\n              Total time: <code>{time}ms</code> for {items.length} items\n            </p>\n            <p>\n              Worker time <code>{workerTime}ms</code> to sort it all\n            </p>\n          </>\n        )}\n      </Body>\n    </AppWrapper>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}